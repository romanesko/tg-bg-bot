package bot

import (
	"bodygraph-bot/pkg/database"
	"bodygraph-bot/pkg/utils"
	"fmt"
	"github.com/go-telegram/bot/models"
	"log"
	"strconv"
	"strings"
	"time"
)

var db = database.NewDb()

type ContextReceiver func(chatID int64)

func SendStartMessage(chat models.Chat) int {
	log.Println("‚Üí SendStartMessage")
	user, err := db.GetUser(chat)
	if err != nil {
		log.Println(err)
		return SendErrorMessage(chat.ID, err)

	}

	if user.BirthDate == nil {
		return AskBirthDate(chat.ID)

	}

	if user.CityID == nil {
		return AskBirthPlace(chat.ID)

	}

	SetUserContext(chat.ID, nil)

	var buttons [][]MessageButton

	buttons = ButtonsSet(
		NewButton("‚ÑπÔ∏è –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "info"),
		NewButton("ü´£ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å", "prognoz"),
		NewButton("üçî –ü—Ä–µ—Å–æ–Ω–∞–ª—å–Ω–∞—è –¥–∏–µ—Ç–∞", "diet"),
		NewButton("üí≥ –ë–∞–ª–∞–Ω—Å", "balance"),
	)
	buttons = append(buttons, []MessageButton{NewButton("‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "settings"), NewButton("‚ùì –ü–æ–º–æ—â—å", "help")})

	return SendMessageWithReplyMarkup(chat.ID, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", buttons, onMenuSelected)

	//sendMessage(chat.ID, "–í—Å—ë –æ–∫")

}

func AskBirthDate(chatID int64) int {
	log.Println("‚Üí AskBirthDate")
	return SendMessage(chatID, "–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞—Ç—É –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è", OnBirthdayReceived)

}

func AskBirthTime(chatID int64) int {
	log.Println("‚Üí AskBirthTime")

	var buttons [][]MessageButton

	buttons = ButtonsSet(NewButton("–ú–Ω–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è üò©", "notime"))

	return SendMessageWithReplyMarkup(chatID,
		"–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è (—ç—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏). –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ, –∏ –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É—Ç–æ—á–Ω–∏—Ç—å, –Ω–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
		buttons, OnBirthTimeReceived)
}

func AskBirthPlace(chatID int64) int {
	log.Println("‚Üí AskBirthPlace")
	return SendMessage(chatID, "–ù–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è", OnBirthPlaceReceived)
}

func OnBirthdayReceived(message *models.Message, callbackData string) int {
	log.Println("‚Üí OnBirthdayReceived")
	date, err := utils.ParseDateFromString(message.Text)
	if err != nil {
		return SendMessage(message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 1991-12-31 –∏–ª–∏ 31.12.1991 –∏–ª–∏ 31/12/1991", OnBirthdayReceived)
	}

	user, _ := db.GetUser(message.Chat)
	user.BirthDate = &date
	err = db.UpdateUser(&user)
	if err != nil {
		return SendErrorMessage(message.Chat.ID, err)
	}

	return AskBirthTime(message.Chat.ID)
}

func OnBirthTimeReceived(message *models.Message, callbackData string) int {
	log.Println("‚Üí OnBirthTimeReceived")

	user, _ := db.GetUser(message.Chat)

	if callbackData == "notime" {
		user.TimeUnknown = true
		err := db.UpdateUser(&user)
		if err != nil {
			return SendErrorMessage(message.Chat.ID, err)
		}
		return AskBirthPlace(message.Chat.ID)
	}

	t, err := utils.ParseTimeFromString(message.Text)
	if err != nil {
		return SendMessage(message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –≤—Ä–µ–º—è. –£–∫–∞–∂–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 15:04", OnBirthTimeReceived)
	}

	if user.BirthDate == nil {
		log.Println("User has no birth date")
		return 1
	}

	newTime := time.Date(user.BirthDate.Year(), user.BirthDate.Month(), user.BirthDate.Day(), t.Hour(), t.Minute(), 0, 0, time.UTC)
	user.BirthDate = &newTime
	err = db.UpdateUser(&user)
	if err != nil {
		return SendErrorMessage(message.Chat.ID, err)

	}

	return AskBirthPlace(message.Chat.ID)
}

func OnBirthPlaceReceived(message *models.Message, callbackData string) int {
	log.Println("‚Üí OnBirthPlaceReceived")
	//user, _ := db.GetUser(message.Chat)
	//log.Println("User: ", user)
	fmt.Printf("%s", message.Text)

	if len(callbackData) > 0 {
		return onCityConfirmed(message, callbackData)
	}

	cities, err := db.FindCity(strings.TrimSpace(strings.ToLower(message.Text)))
	if err != nil {
		log.Println(err)
		return SendErrorMessage(message.Chat.ID, err)

	}

	if len(cities) == 0 {
		return SendMessage(message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–π –∫—Ä—É–ø–Ω—ã–π –≥–æ—Ä–æ–¥ –≤ —Ç–æ–º –∂–µ —á–∞—Å–æ–≤–æ–º –º–æ—è—Å–µ", OnBirthPlaceReceived)

	}

	var buttons [][]MessageButton

	for _, city := range cities {
		buttons = append(buttons, []MessageButton{NewButton(city.DisplayName, strconv.Itoa(city.ID))})
	}

	if len(cities) > 1 {
		return SendMessageWithReplyMarkup(message.Chat.ID, fmt.Sprintf("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤, –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥ –µ—â—ë —Ä–∞–∑"), buttons, OnBirthPlaceReceived)
	} else {
		return SendMessageWithReplyMarkup(message.Chat.ID, fmt.Sprintf("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –∫–Ω–æ–ø–∫–æ–π, –µ—Å–ª–∏ –æ–Ω –æ–ø—Ä–µ–µ–¥–ª—ë–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥ –µ—â—ë —Ä–∞–∑"), buttons, OnBirthPlaceReceived)
	}

}

func onCityConfirmed(message *models.Message, callbackData string) int {
	log.Println("‚Üí onCityConfirmed")
	user, _ := db.GetUser(message.Chat)

	if callbackData == "" {
		return OnBirthPlaceReceived(message, "")

	}

	cityId, err := strconv.Atoi(callbackData)
	if err != nil {
		log.Println(err)
		return SendErrorMessage(message.Chat.ID, err)
	}

	city, err := db.GetCity(cityId)
	if err != nil {
		log.Println(err)
		return SendErrorMessage(message.Chat.ID, err)

	}

	user.CityID = &cityId
	user.CityName = &city.Name
	user.CountryID = &city.CountryID
	user.CountryName = &city.CountryName

	err = db.UpdateUser(&user)
	if err != nil {
		return SendErrorMessage(message.Chat.ID, err)

	}

	var fullBirthday = user.BirthDate.Format("02.01.2006 –≤ 15:04")

	if user.TimeUnknown {
		fullBirthday = user.BirthDate.Format("02.01.2006 (–≤—Ä–µ–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ)")
	}

	SendMessage(message.Chat.ID, fmt.Sprintf("–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–º–ø–µ—Ä—å –∑–Ω–∞—è, —á—Ç–æ –≤—ã —Ä–æ–¥–∏–ª–∏—Å—å –≤ %s –≤ –≥–æ—Ä–æ–¥–µ %s –º—ã —Å–º–æ–∂–µ–º —Ç–æ—á–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", fullBirthday, city.DisplayName), nil)
	return SendStartMessage(message.Chat)
}

func onMenuSelected(message *models.Message, callbackData string) int {
	log.Println("‚Üí onMenuSelected")
	user, _ := db.GetUser(message.Chat)

	switch callbackData {
	case "info":
		SendMarkDownMessage(message.Chat.ID, fmt.Sprintf("–¢—É—Ç —è —Ç—É–ø–æ –≤—ã–∑—ã–≤–∞—é `https://bodygraph.online/api_v1/info.php?dkey=<bot_key>&city=%d&bd=%s` –∏ —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É—é –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", *user.CityID, user.BirthDate.Format("2006-01-02 15:04")), nil)
		break
	case "prognoz":
		SendMarkDownMessage(message.Chat.ID, fmt.Sprintf("–ò –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ—Å—Ç–æ –≤—ã–∑–æ–≤ `https://bodygraph.online/api_v1/prognoz.php?dkey=<bot_key>&city=%d&bd=%s` –∏ —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É—é –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", *user.CityID, user.BirthDate.Format("2006-01-02 15:04")), nil)
		break
	case "diet":
		SendMarkDownMessage(message.Chat.ID, fmt.Sprintf("–ü–æ –¥–∏–µ—Ç–µ —Ç–∞–∫ –∂–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–π —É—Ä–ª `https://bodygraph.online/api_v1/diet.php?dkey=<bot_key>&city=%d&bd=%s` –∏ —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É—é –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", *user.CityID, user.BirthDate.Format("2006-01-02 15:04")), nil)
		break
	case "else":
		SendMarkDownMessage(message.Chat.ID, fmt.Sprintf("–¢—É—Ç –Ω–∞–≤–µ—Ä–Ω–æ–µ —Ç–æ–∂–µ —á—Ç–æ-—Ç–æ –±—É–¥–µ—Ç"), nil)
		break
	case "help":
		SendMarkDownMessage(message.Chat.ID, fmt.Sprintf("–¢—É—Ç –¥—ë—Ä–Ω–µ–º —É—Ä–ª —Å –ø–æ–º–æ—â—å—é `https://bodygraph.online/api_v1/help.php` –∏ —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É—é –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", *user.CityID, user.BirthDate.Format("2006-01-02 15:04")), nil)
		break
	case "settings":
		return SendSettingsMenu(message.Chat.ID)

	case "balance":
		return SendBalanceMenu(message.Chat.ID)

	}

	return SendStartMessage(message.Chat)

}

func SendSettingsMenu(chatID int64) int {
	log.Println("‚Üí SendSettingsMenu")

	buttons := ButtonsSet(
		NewButton("üíÄ –°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ä–æ–∂–¥–µ–Ω–∏–∏", "settings:reset"),
		NewButton("ü´• –ß—Ç–æ-—Ç–æ –µ—â—ë", "settings:else"),
		NewButton("‚§¥Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "mainmenu"),
	)

	return SendMessageWithReplyMarkup(chatID, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", buttons, onSettingsSelected)
}

func onSettingsSelected(message *models.Message, callbackData string) int {
	log.Println("‚Üí onSettingsSelected")
	user, _ := db.GetUser(message.Chat)

	switch callbackData {
	case "settings:reset":
		user.BirthDate = nil
		user.CityID = nil
		user.CityName = nil
		user.CountryID = nil
		user.CountryName = nil
		err := db.UpdateUser(&user)
		if err != nil {
			return SendErrorMessage(message.Chat.ID, err)

		}
		SendMessage(message.Chat.ID, "–î–∞–Ω–Ω—ã–µ –æ —Ä–æ–∂–¥–µ–Ω–∏–∏ —Å–±—Ä–æ—à–µ–Ω—ã", nil)
		return SendStartMessage(message.Chat)

	case "balance":
		return SendMarkDownMessage(message.Chat.ID, fmt.Sprintf("–ü—Ä–æ—Å—Ç–æ —á—Ç–æ-—Ç–æ –µ—â—ë"), nil)

	case "mainmenu":
		return SendStartMessage(message.Chat)

	}

	log.Println("–ö–∞–∫ –º—ã —Ç—É—Ç –æ–∫–∞–∑–∞–ª–∏—Å—å? ü§î")
	return 1

}

func SendBalanceMenu(chatID int64) int {
	log.Println("‚Üí SendBalanceMenu")

	buttons := ButtonsSet(NewButton("‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å", "add"), NewButton("‚§¥Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "mainmenu"))

	return SendMessageWithReplyMarkup(chatID, "–í–∞—à –±–∞–ª–∞–Ω—Å 1 000 000 —Ä—É–±–ª–µ–π", buttons, onBalanceSelected)

}

func onBalanceSelected(message *models.Message, callbackData string) int {
	log.Println("‚Üí onBalanceSelected")
	//user, _ := db.GetUser(message.Chat)
	//log.Println("User: ", user)

	switch callbackData {
	case "add":
		return SendMarkDownMessage(message.Chat.ID, fmt.Sprintf("–¢—É—Ç –±—É–¥–µ–º –ø–æ–ø–æ–ª–Ω—è—Ç—å –±–∞–ª–∞–Ω—Å"), nil)
	case "mainmenu":
		return SendStartMessage(message.Chat)
	}

	log.Println("–ö–∞–∫ –º—ã —Ç—É—Ç –æ–∫–∞–∑–∞–ª–∏—Å—å? ü§î")
	return 1
}
